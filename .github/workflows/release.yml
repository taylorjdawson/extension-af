name: Release Build and Attach Artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run compile

      - name: Build (Chromium)
        run: npm run build

      - name: Build (Firefox)
        run: npm run build:firefox

      - name: Determine version
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME}"
          if [ -z "$VERSION" ]; then
            VERSION="v$(node -p "require('./package.json').version")"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Zip build outputs (with helper scripts)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release-ready package/chromium package/firefox

          CHROME_DIR=".output/chrome-mv3"
          FIREFOX_DIR=".output/firefox-mv2"

          if [ -d "$CHROME_DIR" ]; then
            rsync -a "$CHROME_DIR"/ package/chromium/
          else
            echo "Expected Chrome build dir not found: $CHROME_DIR" >&2
          fi

          if [ -d "$FIREFOX_DIR" ]; then
            rsync -a "$FIREFOX_DIR"/ package/firefox/
          else
            echo "Expected Firefox build dir not found: $FIREFOX_DIR" >&2
          fi

          # Add helper scripts and quick README to both packages (no heredocs to keep YAML linters happy)
          for TARGET in chromium firefox; do
            PKG_DIR="package/${TARGET}"
            [ -d "$PKG_DIR" ] || continue

            printf '%s\n' \
              'Quick install' \
              '' \
              'Chromium (Chrome/Edge)' \
              '1) Open chrome://extensions (or edge://extensions)' \
              '2) Enable Developer mode' \
              '3) Drag this folder onto the page OR click "Load unpacked" and select this folder' \
              '' \
              'Firefox (temporary load)' \
              '1) Open about:debugging#/runtime/this-firefox' \
              '2) Click "Load Temporary Add-onâ€¦" and pick manifest.json in this folder' \
              '' \
              'Helper commands' \
              'macOS Chrome:   open -a "Google Chrome" chrome://extensions' \
              'macOS Edge:     open -a "Microsoft Edge" edge://extensions' \
              'Windows Chrome: start chrome chrome://extensions' \
              'Windows Edge:   start msedge edge://extensions' \
              '' \
              'Notes' \
              '- Chromium requires Developer mode for unpacked extensions' \
              '- Firefox temporary loads disappear on restart unless signed' \
              > "$PKG_DIR/INSTALL-README.txt"

            printf '%s\n' \
              '#!/bin/bash' \
              'open -a "Google Chrome" chrome://extensions || true' \
              'open -a "Microsoft Edge" edge://extensions || true' \
              'open "$(pwd)" || true' \
              'echo "Enable Developer mode, then drag this folder or click '\''Load unpacked'\''."' \
              'read -r -p "Press Enter to exit..." _' \
              > "$PKG_DIR/Open-Extensions-Page.command"
            chmod +x "$PKG_DIR/Open-Extensions-Page.command" || true

            printf '%s\n' \
              'Start-Process chrome "chrome://extensions" -ErrorAction SilentlyContinue' \
              'Start-Process msedge "edge://extensions" -ErrorAction SilentlyContinue' \
              'Start-Process explorer "." -ErrorAction SilentlyContinue' \
              'Write-Host "Enable Developer mode, then drag this folder or click ''Load unpacked''."' \
              > "$PKG_DIR/Open-Extensions-Page.ps1"
          done

          # Create versioned and stable zips
          if [ -d package/chromium ]; then
            (cd package/chromium && zip -r ../../release-ready/extension-af-chromium-${VERSION}.zip .)
            (cd package/chromium && zip -r ../../release-ready/extension-af-chromium.zip .)
          fi
          if [ -d package/firefox ]; then
            (cd package/firefox && zip -r ../../release-ready/extension-af-firefox-${VERSION}.zip .)
            (cd package/firefox && zip -r ../../release-ready/extension-af-firefox.zip .)
          fi

          ls -lah release-ready

      - name: Upload zip artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-zips
          path: release-ready/*.zip
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build-and-zip
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-zips
          path: release-assets

      - name: Create GitHub Release and attach zips
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/**/*.zip
          draft: false
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
